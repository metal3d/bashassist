# if Using ollama
__TAIRMINAL_OLLAMA_API=http://localhost:11434/api/generate
__TAIRMINAL_OLLAMA_MODEL="gemma3n:e4b"

# if Using pollinations
__TAIRMINAL_POLLINATIONS_API=https://text.pollinations.ai

# System prompt to avoid any interpretation of the command
# we only want the raw command to be returned
__TAIRMINAL_SYSTEM="You must answer only with the raw Bash command that solves the user's request. Do not include any explanations, comments, or formatting (no backticks, no Markdown, no code block). Respond with the command only, as if to paste it directly in the terminal. No line breaks, no quotes, no prefix, no trailing punctuation."

# choose the API to use
# - pollination is free, thanks to them https://pollinations.ai/
# - ollama is a free local server, you can use a tiny model like gemma3n:e2b
__TAIRMINAL_API=pollinations

# display information about the command
__TAIRMINAL_SHOW_INFO=true

# support for both yq and jq
__TAIRMINAL_JQ=$(command -v yq || command -v jq)

__load_tairminal() {
  for config_file in ~/.local/share/tairminal/config ~/.config/tairminal/config; do
    if [[ -f "$config_file" ]]; then
      eval "$(
        source "$config_file" 2>/dev/null

        [[ -n "$ENGINE" ]] && printf '__TAIRMINAL_API=%q\n' "$ENGINE"
        [[ -n "$OLLAMA_API" ]] && printf '__TAIRMINAL_OLLAMA_API=%q\n' "$OLLAMA_API"
        [[ -n "$OLLAMA_MODEL" ]] && printf '__TAIRMINAL_OLLAMA_MODEL=%q\n' "$OLLAMA_MODEL"
        [[ -n "$SYSTEM" ]] && printf '__TAIRMINAL_SYSTEM=%q\n' "$SYSTEM"
        [[ -n "$SHOW_INFO" ]] && printf '__TAIRMINAL_SHOW_INFO=%q\n' "$SHOW_INFO"
      )"
      break
    fi
  done
}

__tairminal_ollama() {
  local PROMPT=$1
  local MODEL=$__TAIRMINAL_OLLAMA_MODEL
  local RESPONSE=$(http --ignore-stdin --timeout 60 \
    POST $__TAIRMINAL_OLLAMA_API \
    model="$MODEL" \
    system="$__TAIRMINAL_SYSTEM" \
    prompt="$PROMPT" \
    stream:=false)

  # Extraire le texte de la réponse
  local CMD=$(echo "$RESPONSE" | ${__TAIRMINAL_JQ} -r '.response')
  echo "$CMD"
}
__tairminal_pollinations() {
  local PROMPT=$1
  local RESPONSE=$(http --follow --ignore-stdin --timeout 60 \
    https://text.pollinations.ai/"$(printf "%s" $PROMPT)" \
    system=="$__TAIRMINAL_SYSTEM" \
    private==true)
  echo "$RESPONSE"
}

__tairminal_generate() {
  __load_tairminal

  # The current line in the readline buffer
  local INPUT="$READLINE_LINE"

  # check if the line starts with a comment character
  if [[ "$INPUT" != \#* ]]; then
    echo "❌ Line should be a comment (statring by #)"
    return
  fi

  # drop the comment character
  local PROMPT="${INPUT#\# }"

  case $__TAIRMINAL_API in
  ollama)
    CMD=$(__tairminal_ollama "$PROMPT")
    $__TAIRMINAL_SHOW_INFO && CMD=$(echo -ne "# Generated by tairminal using $__TAIRMINAL_API model $__TAIRMINAL_OLLAMA_MODEL\n$CMD")
    ;;
  pollinations)
    CMD=$(__tairminal_pollinations "$PROMPT")
    $__TAIRMINAL_SHOW_INFO && CMD=$(echo -ne "# Generated by tairminal using Pollinations API\n$CMD")
    ;;
  *)
    CMD="# ❌ unsupported api: $__TAIRMINAL_API"
    ;;
  esac

  [ -z "$CMD" ] && CMD="# ❌ No response"
  READLINE_LINE="$CMD"
  READLINE_POINT=${#CMD}
}

# bind CTRL+x CTRL+o to the __tairminal_generate function
bind -x '"\C-x\C-o": __tairminal_generate'
